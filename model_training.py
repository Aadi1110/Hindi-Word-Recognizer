# -*- coding: utf-8 -*-
"""Task1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1d6wU6EzM9weSjebuqh3YaJG7X-NbChrC
"""



from google.colab import drive
drive.mount('/content/drive', force_remount = True)

import os
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.utils import shuffle
from sklearn.model_selection import train_test_split
from tensorflow import keras

os.chdir('/content/drive/MyDrive/Mosaic Tasks/Task1')
os.listdir()

dftrain = pd.read_csv('X_train.csv')
dftrain.drop(columns = [dftrain.columns[0]], inplace = True)
dftrain = np.array(dftrain)
dftrain = np.reshape(dftrain, (49300, 32, 32, 1))
print(dftrain.shape)

dftest = pd.read_csv('X_test.csv')
dftest.drop(columns = [dftest.columns[0]], inplace = True)
dftest = np.array(dftest)
dftest = np.reshape(dftest, (8700, 32, 32, 1))
print(dftest.shape)

ytrain = pd.read_csv('Y_train.csv')
ytrain.drop(columns = [ytrain.columns[0]], inplace = True)
ytrain = np.array(ytrain)
ytrain = np.reshape(ytrain, (49300, 1))
print(ytrain.shape)

ytest = pd.read_csv('Y_test.csv')
ytest.drop(columns = [ytest.columns[0]], inplace = True)
ytest = np.array(ytest)
ytest = np.reshape(ytest, (8700, 1))
print(ytest.shape)

labels = {1: 'ka', 2: 'kha', 4: 'gha', 6: 'cha', 8: 'ja', 10: 'yna', 11: 'taamatar', 12: 'thaa', 
          13: 'daa', 14: 'dhaa', 16: 'tabala', 17: 'tha', 18: 'da', 19: 'dha', 20: 'na', 21: 'pa',
          22: 'pha', 23: 'ba', 24: 'bha', 25: 'ma', 26: 'yaw', 27: 'ra', 28: 'la', 29: 'waw', 
          31: 'petchiryakha', 32: 'patalosaw', 33: 'ha', 35: 'tra', 36: 'gya'}
print(len(labels))

dftrain = dftrain / 255.0
dftest = dftest / 255.0

dftrain, ytrain = shuffle(dftrain, ytrain, random_state = 0)
dftest, ytest = shuffle(dftest, ytest, random_state = 1)

dftest, dfval, ytest, yval = train_test_split(dftest, ytest, test_size = 0.6, random_state = 2)

x = dftrain[0]
x = np.reshape(x, (32, 32))
plt.imshow(x)

ytrain = keras.utils.to_categorical(ytrain)
print(ytrain.shape)

ytest = keras.utils.to_categorical(ytest)
print(ytest.shape)

yval = keras.utils.to_categorical(yval)
print(yval.shape)

model = keras.models.Sequential()

model.add(keras.layers.Conv2D(64, (3, 3), padding = 'same', activation = 'relu', input_shape = (32, 32, 1)))
model.add(keras.layers.Conv2D(64, (3, 3), padding = 'same', activation = 'relu'))
model.add(keras.layers.Conv2D(128, (3, 3), padding = 'same', activation = 'relu'))
model.add(keras.layers.MaxPooling2D((2, 2)))

model.add(keras.layers.Conv2D(128, (3, 3), padding = 'same', activation = 'relu'))
model.add(keras.layers.Conv2D(256, (5, 5), padding = 'same', activation = 'relu'))
model.add(keras.layers.MaxPooling2D((2, 2)))
model.add(keras.layers.Conv2D(256, (5, 5), padding = 'same', activation = 'relu'))

model.add(keras.layers.Flatten())
model.add(keras.layers.Dense(512, activation = 'relu'))
model.add(keras.layers.Dense(128, activation = 'relu'))
model.add(keras.layers.Dense(64, activation = 'relu'))
model.add(keras.layers.Dense(37, activation = 'softmax'))

print(model.summary())

from keras.preprocessing.image import ImageDataGenerator
from keras.callbacks import *

datagen = ImageDataGenerator(rotation_range = 10, zoom_range = 0.1, width_shift_range = 0.1, height_shift_range = 0.1)
datagen.fit(dftrain)

model.compile(optimizer = keras.optimizers.Adam(lr = 1e-3), loss = 'categorical_crossentropy', metrics = ['accuracy'])

reduce_lr = ReduceLROnPlateau(monitor='val_loss', factor=0.8,
                              patience=3)

history = model.fit_generator(datagen.flow(dftrain, ytrain, batch_size = 200), epochs = 25, steps_per_epoch = 200, validation_data = (dfval, yval), callbacks = [reduce_lr])

model.evaluate(dftest, ytest, batch_size = 400, verbose = 1)

model.save('With_Augmentation.h5')

predicted = model.predict(x = dftest, verbose = 1)

index = 400
img = dftest[index]
img = img.reshape((32,32))
plt.imshow(img)
x = np.argmax(predicted[index])
print(labels[x])

